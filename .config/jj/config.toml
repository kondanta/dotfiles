"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"

[user]
name = "Taylan Dogan"
# email = "" # I set email per project

[signing]
# backend = "gpg" # Uncomment this line after adding the key. 
behavior = "own"
key = "!" # I set GPG key per project

[commit]
sign-with-gpg = true

[ui]
default-command = "log"
diff-formatter = "difft"
graph.style = "square"
commit-id-format = "shortest_unique_prefix"
pager = { command = ["less", "-FRX"], env = { LESSCHARSET = "utf-8" } }
should-sign-off = true

[merge.tools-difft]
program = "difft"
diff-args = ["--color=always", "$left", "$right"]

[git]
auto-local-bookmark = false
push-bookmark-prefix = "taylan/push-"
private-commits = 'blacklist()'
colocate = true
write-change-id-header = true

[snapshot]
auto-update-stale = true

# Revsets

[revsets]
log = "stack(@)"

[revset-aliases]
# By default, show the repo trunk, the remote bookmarks, and all remote tags. We
# don't want to change these in most cases, but in some repos it's useful.
'immutable_heads()' = 'present(trunk()) | remote_bookmarks() | tags()'

# Useful to ignore this, in many repos. For repos like `jj` these are
# consistently populated with a bunch of auto-generated commits, so ignoring it
# is often nice.
'gh_pages()' = 'ancestors(remote_bookmarks(exact:"gh-pages"))'

# trunk() by default resolves to the latest 'main'/'master' remote bookmark.
'trunk()' = 'latest((present(main) | present(master)) & remote_bookmarks())'

# Private and WIP commits that should never be pushed anywhere. Often part of
# work-in-progress merge stacks.
'wip()' = 'description(glob:"wip:*")'
'private()' = 'description(glob:"private:*")'
'blacklist()' = 'wip() | private()'

# stack(x, n) is the set of mutable commits reachable from 'x', with 'n'
# parents. 'n' is often useful to customize the display and return set for
# certain operations. 'x' can be used to target the set of 'roots' to traverse,
# e.g. @ is the current stack.
'stack()' = 'ancestors(reachable(@, mutable()), 2)'
'stack(x)' = 'ancestors(reachable(x, mutable()), 2)'
'stack(x, n)' = 'ancestors(reachable(x, mutable()), n)'

# The current set of "open" works. It is defined as:
#
# - given the set of commits not in trunk, that are written by me,
# - calculate the given stack() for each of those commits
#
# n = 1, meaning that nothing from `trunk()` is included, so all resulting
# commits are mutable by definition.
'open()' = 'stack(trunk().. & mine(), 1)'
# the set of 'ready()' commits. defined as the set of open commits, but nothing
# that is blacklisted or any of their children.
'ready()' = 'open() ~ blacklist()::'


[aliases]
d = ["diff"]
s = ["show"]
pl = ["obslog", "-p"]                      # Progression log (pl)
ll = ["log", "-T", "builtin_log_detailed"]
c = ["commit", "--interactive"]

# Get all open stacks of work.
open = ["log", "-r", "open()"]

credit = ["file", "annotate"]

# # Retrunk a series. Typically used as `jj retrunk -s ...`, and notably can be
# used with open:
# - jj retrunk -s 'all:roots(open())'
retrunk = ["rebase", "-d", "trunk()"]
# Retrunk the current stack of work.
reheat = ["rebase", "-d", "trunk()", "-s", "all:roots(trunk()..stack(@))"]

# - jj consume xyz /path/to/file
consume = ["squash", "--into", "@", "--from"]
# Eject content from @ into any other change.
# - jj eject xyz --interactive
eject = ["squash", "--from", "@", "--into"]

tug = ["bookmark", "move", "--from", "heads(::@- & bookmarks())", "--to", "@-"]


# Configuring jj per repository. This command will open the configuration editor for the current repository.
configure = ["config", "edit", "--repo"]

# Pushing and Pulling
# Sync everything
sync = ["git", "fetch", "--all-remotes"]

# The argument is for the pull request number.
fetch-pr = ["util", "exec", "--", "bash", "-c", """
set -euo pipefail
git fetch origin "pull/$1/head:pr-$1"
jj bookmark list "pr-$1"
""", "fetch-pr"]

pushall = ["git", "push", "--all"]
pushc = ["git", "push", "-c", "@-", "--allow-new"]
push = ["git", "push"]


[colors]
# Base customizations
"normal change_id" = { bold = true, fg = "magenta" }
"immutable change_id" = { bold = false, fg = "bright cyan" }

# Used by log node template
"node" = { bold = true }
"node elided" = { fg = "bright black" }
"node working_copy" = { fg = "green" }
"node conflict" = { fg = "red" }
"node immutable" = { fg = "bright cyan" }
"node wip" = { fg = "yellow" }
"node normal" = { bold = false }

# Used in other various templates
"text link" = { bold = true, fg = "magenta" }
"text warning" = { bold = true, fg = "red" }


[template-aliases]
'format_commit_summary(commit_id, description, author, email, timestamp)' = '''
commit_id.short() ++ " " ++ description.first_line() ++
" (" ++ author ++ " <" ++ email ++ "> " ++ timestamp.ago() ++ ")"
'''


[templates]
# Draft commit description. Includes:
# - Change-Id fields for Gerrit, and
# - Signed-off-by lines
draft_commit_description = '''
concat(
  description,
  "\n",
  if(
    config("ui.should-sign-off").as_boolean() && !description.contains("Signed-off-by: " ++ author.name()),
    "\nSigned-off-by: " ++ author.name() ++ " <" ++ author.email() ++ ">",
  ),
  "\n",
  surround(
    "\nJJ: This commit contains the following changes:\n", "",
    indent("JJ:     ", diff.summary()),
  ),
)
'''

op_log_node = 'if(current_operation, "@", "◉")'
log_node = '''
label("node",
  coalesce(
    if(!self, label("elided", "⇋")),
    if(current_working_copy, label("working_copy", "◉")),
    if(conflict, label("conflict", "x")),
    if(immutable, label("immutable", "◆")),
    if(description.starts_with("wip: "), label("wip", "!")),
    label("normal", "○")
  )
)
'''
